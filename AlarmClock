import time
import datetime
import pygame
import random
import threading
import tkinter as tk
from tkinter import messagebox
from tkinter import filedialog
from math import cos, sin, pi

pygame.mixer.init()

motivational_quotes = [
    "Wake up! Your dreams wonâ€™t work unless you do!",
    "Rise and shine! A new day, a new opportunity!",
    "Every morning is a fresh start. Make the most of it!",
    "Success starts with waking up with determination!"
]

alarms = {}

def play_sound(sound_file):
    """Plays the given sound file."""
    pygame.mixer.music.load(sound_file)
    pygame.mixer.music.play()

def play_quote():
    """Plays a random motivational quote."""
    quote = random.choice(motivational_quotes)
    messagebox.showinfo("Motivational Quote", quote)

def set_alarm(time_str, sound_file):
    """Sets an alarm at the specified time with the given sound file."""
    alarms[time_str] = sound_file

def check_alarms():
    """Checks if any alarm is due and plays the sound."""
    while True:
        now = datetime.datetime.now().strftime("%H:%M")
        if now in alarms:
            play_sound(alarms[now])
            del alarms[now]
        time.sleep(60)

def snooze_alarm(snooze_time):
    """Snoozes the alarm for the specified duration in minutes."""
    time.sleep(snooze_time * 60)
    play_sound("default_alarm_sound.mp3")

def browse_file():
    """Opens a file dialog to select a sound file."""
    file_path = filedialog.askopenfilename()
    return file_path

def add_alarm():
    """Adds a new alarm."""
    alarm_time = entry_time.get()
    sound_file = browse_file()
    set_alarm(alarm_time, sound_file)
    messagebox.showinfo("Alarm Set", f"Alarm set for {alarm_time} with sound {sound_file}")

def update_clock():
    """Updates the clock display."""
    now = datetime.datetime.now()
    hours = now.hour % 12
    minutes = now.minute
    seconds = now.second

    canvas.delete("hands")
    draw_hand(hours * 30 + minutes * 0.5, 50, "black")  # Hour hand
    draw_hand(minutes * 6, 70, "blue")  # Minute hand
    draw_hand(seconds * 6, 90, "red")  # Second hand

    root.after(1000, update_clock)

def draw_hand(angle, length, color):
    """Draws a clock hand."""
    angle = pi/2 - angle * pi/180
    x = 150 + length * cos(angle)
    y = 150 - length * sin(angle)
    canvas.create_line(150, 150, x, y, width=2, fill=color, tags="hands")

# Tkinter UI
root = tk.Tk()
root.title("Alarm Clock")

frame = tk.Frame(root)
frame.pack(pady=20)

canvas = tk.Canvas(root, width=300, height=300, bg="white")
canvas.pack()

# Draw clock face
canvas.create_oval(50, 50, 250, 250)
for i in range(12):
    angle = pi/2 - i * pi/6
    x = 150 + 90 * cos(angle)
    y = 150 - 90 * sin(angle)
    canvas.create_text(x, y, text=str(i if i != 0 else 12), font=("Arial", 12))

label_time = tk.Label(frame, text="Set Alarm Time (HH:MM):")
label_time.grid(row=0, column=0)

entry_time = tk.Entry(frame)
entry_time.grid(row=0, column=1)

button_set_alarm = tk.Button(frame, text="Set Alarm", command=add_alarm)
button_set_alarm.grid(row=1, columnspan=2, pady=10)

button_snooze = tk.Button(frame, text="Snooze", command=lambda: snooze_alarm(5))
button_snooze.grid(row=2, columnspan=2, pady=10)

button_quote = tk.Button(frame, text="Play Quote", command=play_quote)
button_quote.grid(row=3, columnspan=2, pady=10)

# Start the alarm checking thread
threading.Thread(target=check_alarms, daemon=True).start()

# Start the clock update
update_clock()

root.mainloop()